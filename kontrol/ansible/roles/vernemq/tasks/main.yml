---
# Inspired by https://github.com/suiluj/pi-adhoc-mqtt-cluster/blob/master/install_scripts/vernemqinstall.txt.

- name: install build dependencies (round 1)
  apt:
    cache_valid_time: 86400
    name:
      - autoconf
      - libssl1.0-dev
      - libncurses5-dev
  become: yes
  become_user: root


# libssh-dev won't install unless libssl1.0-dev is already present.
- name: install build dependencies (round 2)
  apt:
    cache_valid_time: 86400
    name:
      - libssh-dev
  become: yes
  become_user: root

# Store this to a register so we can use it on localhost.
- name: get host architecture
  shell: "echo '{{ ansible_architecture }}'"
  changed_when: False
  register: host_architecture

# erlang installer helper
- name: install kerl
  get_url:
    url: https://raw.githubusercontent.com/kerl/kerl/73b71512188fe6c16a01d1b983ee7d9508fe346a/kerl
    dest: /usr/local/bin/kerl
    mode: '0755'
  become: yes
  become_user: root

- name: check if pre-existing erlang build for architecture exists
  local_action: "stat path={{ playbook_dir }}/artifacts/kerl/{{ erlang_version }}.{{ host_architecture.stdout | trim }}.tar.gz"
  register: stat_existing_build

- name: check for existing erlang installation
  stat:
    path: "/opt/kerl/{{ erlang_version }}"
  register: stat_erlang

- name: install pre-existing erlang build
  unarchive:
    src: "{{ playbook_dir }}/artifacts/kerl/{{ erlang_version }}.{{ host_architecture.stdout | trim }}.tar.gz"
    dest: "/opt/kerl/{{ erlang_version }}"
  when: stat_existing_build.stat.exists and not stat_erlang.stat.exists

# This takes forever. It should generally only fire the first time
# this is being built for a particular version/architecture; after
# that it should be cached as a tarball locally.
- name: build and install erlang
  shell: >-
    kerl build {{ erlang_version }} &&
    kerl install {{ erlang_version }} /opt/kerl/{{ erlang_version }}
  when: not stat_erlang.stat.exists and not stat_existing_build.stat.exists
  become: yes
  become_user: root

- name: package erlang installation
  archive:
    path: "/opt/kerl/{{ erlang_version }}"
    dest: "/opt/kerl/{{ erlang_version }}.{{ host_architecture.stdout | trim }}.tar.gz"
  when: not stat_existing_build.stat.exists
  become: yes
  become_user: root

# This might lead to issues if it's run on multiple hosts at once. It
# shouldn't ever get invoked after the initial build though, so just
# be careful to only let this run when there's only one host per
# architecture.
- name: store packaged erlang installation for future use
  fetch:
    src: "/opt/kerl/{{ erlang_version }}.{{ host_architecture.stdout | trim }}.tar.gz"
    dest: "{{ playbook_dir }}/artifacts/kerl/{{ erlang_version }}.{{ host_architecture.stdout | trim }}.tar.gz"
    flat: yes
  when: not stat_existing_build.stat.exists

- name: activate erlang build at boot
  lineinfile:
    path: /home/pi/.bashrc
    line: ". /opt/kerl/{{ erlang_version }}/activate"

# - name: check for existing vernemq installation
#   stat:
#     path: /usr/local/bin/vernemq
#   register: stat_vernemq

# - name: clone vernemq
#   git:
#     repo: https://github.com/larshesel/vernemq.git
#     dest: /usr/local/src/vernemq
#     refspec: 7e458c6215176ec08efae7226642de66ac7a4769
#   when: not stat_vernemq.stat.exists
#   become: yes
#   become_user: root

# - name: build and install vernemq
#   shell: |
#     cd /usr/local/src/vernemq
#     make rpi32
#   when: not stat_vernemq.stat.exists
#   become: yes
#   become_user: root
