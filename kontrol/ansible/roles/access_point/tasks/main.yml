---
# Set up the device as an access point (so that external devices like
# the feather can connect) on a manually-created network interface,
# and a WiFi client for either the internet or the master AP. Add
# scripts to switch the access point and WiFi config between various
# valid configurations (see the README for more info). See
# e.g. https://hackaday.com/2017/09/29/simultaneous-ap-client-on-the-pi-zero-w/.

- name: add udev rule for AP device
  copy:
    dest: /etc/udev/rules.d/70-persistent-net.rules
    content: |
      SUBSYSTEM=="ieee80211", ACTION=="add|change", KERNEL=="phy0", RUN+="/sbin/iw phy phy0 interface add {{ ap_device_name }} type __ap"

    # # Don't overwrite the file if it already exists, so we don't keep
    # # changing the MAC address.
    # force: no
  register: ap_udev
  become: yes
  become_user: root

- name: install dependencies
  apt:
    name:
      - dnsmasq
      - hostapd
    cache_valid_time: 86400
  register: dependencies
  become: yes
  become_user: root

# The IP range here is arbitrary, but the subnet must be consistent
# with the configured node IP. The server address is just google DNS,
# can really be anything since we won't actually be connected to the
# internet.
- name: configure dnsmasq
  blockinfile:
    path: /etc/dnsmasq.conf
    block: |
      interface=lo,{{ ap_device_name }}
      no-dhcp-interface=lo,{{ wlan_device_name }}
      bind-interfaces
      server=8.8.8.8
      domain-needed
      bogus-priv
      dhcp-range={{ ap_dhcp_range }}
  become: yes
  become_user: root

- name: create hostapd config directory
  file:
    path: "{{ custom_hostapd_directory }}"
    state: directory
  become: yes
  become_user: root

- name: create hostapd configs
  copy:
    dest: "{{ custom_hostapd_directory }}/hostapd.{{ item.mode }}.conf"
    content: |
      ctrl_interface=/var/run/hostapd
      ctrl_interface_group=0
      interface=ap0
      driver=nl80211
      ssid={{ item.ap_name }}
      hw_mode=g
      channel={{ ap_channel }}
      wmm_enabled=0
      macaddr_acl=0
      auth_algs=1
      wpa=2
      wpa_passphrase={{ ap_passphrase }}
      wpa_key_mgmt=WPA-PSK
      wpa_pairwise=TKIP CCMP
      rsn_pairwise=CCMP
  with_items:
    - mode: pairing
      ap_name: "{{ pairing_ap_name }}"
    - mode: master
      ap_name: "{{ master_ap_name }}"
    - mode: default
      ap_name: "{{ primary_ap_name }}"
    - mode: slave
      ap_name: "{{ primary_ap_name }}"
  become: yes
  become_user: root

- name: add default hostapd config if none exists
  copy:
    dest: /etc/hostapd/hostapd.conf
    src: "{{ custom_hostapd_directory }}/hostapd.default.conf"
    remote_src: yes
    force: no
  become: yes
  become_user: root

- name: use hostapd configuration
  lineinfile:
    path: /etc/default/hostapd
    line: DAEMON_CONF="/etc/hostapd/hostapd.conf"
  become: yes
  become_user: root

- name: create swappable network interface directory
  file:
    path: "{{ custom_interfaces_directory }}"
    state: directory
  become: yes
  become_user: root

- name: add AP device config
  copy:
    dest: "/etc/network/interfaces.d/{{ ap_device_name }}"
    content: |
      auto {{ ap_device_name }}

      allow-hotplug {{ ap_device_name }}
      iface {{ ap_device_name }} inet static
          address {{ ap_self_address }}
          netmask 255.255.255.0
          hostapd /etc/hostapd/hostapd.conf
  # with_items:
  #   - pairing
  #   - master
  #   - default
  #   - slave
  become: yes
  become_user: root

- name: add slave wpa_supplicant.conf
  copy:
    dest: "{{ slave_wpa_supplicant_conf }}"
    content: |
      country={{ slave_wpa_supplicant_country }}

      ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
      update_config=1

      network={
        ssid="{{ master_ap_name }}"
        psk="{{ ap_passphrase }}"
        key_mgmt=WPA-PSK
      }
  become: yes
  become_user: root

- name: add slave WiFi client config
  copy:
    dest: "{{ custom_interfaces_directory }}/{{ wlan_device_name }}.slave"
    content: |
      auto {{ wlan_device_name }}
      allow-hotplug {{ wlan_device_name }}
      iface {{ wlan_device_name }} inet dhcp
          pre-up ifup {{ ap_device_name }}
          wpa-conf {{ slave_wpa_supplicant_conf }}
  become: yes
  become_user: root

- name: add default WiFi client config
  copy:
    dest: "{{ custom_interfaces_directory }}/{{ wlan_device_name }}.{{ item }}"
    content: |
      auto {{ wlan_device_name }}
      allow-hotplug {{ wlan_device_name }}
      iface {{ wlan_device_name }} inet dhcp
          pre-up ifup {{ ap_device_name }}
          wpa-conf {{ default_wpa_supplicant_conf }}
  with_items:
    - pairing
    - master
    - default
  become: yes
  become_user: root

- name: use default WiFi client config
  copy:
    dest: "/etc/network/interfaces.d/{{ wlan_device_name }}"
    src: "{{ custom_interfaces_directory }}/{{ wlan_device_name }}.default"
    remote_src: true
    force: no
  become: yes
  become_user: root

- name: add network switcher command
  template:
    src: "{{ role_path }}/templates/network_switcher.sh.tpl"
    dest: "/usr/local/bin/{{ network_switcher_cmd_name }}"
    mode: '0755'
  become: yes
  become_user: root

- name: prevent dhcpcd from configuring interfaces
  lineinfile:
    path: /etc/dhcpcd.conf
    state: present
    line: "denyinterfaces {{ ap_device_name }} {{ wlan_device_name }}"
  become: yes
  become_user: root

# - name: enable default network at boot
#   cron:
#     name: enable_default_network
#     user: root
#     job: "/usr/local/bin/{{ network_switcher_cmd_name }} default"
#     special_time: reboot
#   become: yes
#   become_user: root

- name: reboot system
  reboot:
  when: ap_udev.changed
  become: yes
  become_user: root

# See https://github.com/raspberrypi/documentation/issues/1018
# - name: unmask hostapd
#   shell: systemctl unmask hostapd && systemctl enable hostapd && systemctl start hostapd
#   when: dependencies.changed
#   become: yes
#   become_user: root
