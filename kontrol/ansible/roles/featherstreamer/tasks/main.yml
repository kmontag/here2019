---
- name: install dependencies
  apt:
    cache_valid_time: 86400
    name:
      - stow
  become: yes
  become_user: root

- name: check for existing node download
  stat:
    path: "/usr/local/stow/node-v{{ node_version }}-linux-armv6l"
  register: stat_node_download

- name: download node binaries
  unarchive:
    dest: /usr/local/stow/
    src: "https://nodejs.org/dist/v10.15.3/node-v{{ node_version }}-linux-armv6l.tar.xz"
    remote_src: yes
  # If we don't make this conditional, it makes a network request
  # every time.
  when: not stat_node_download.stat.exists
  become: yes
  become_user: root

- name: check for existing node command
  stat:
    path: /usr/local/bin/node
  register: stat_node

- name: install nodejs
  shell: "stow node-v{{ node_version }}-linux-armv6l"
  args:
    chdir: /usr/local/stow
  changed_when: not stat_node.stat.exists
  become: yes
  become_user: root

- name: make module directory writable by the pi user
  file:
    state: directory
    path: "{{ item }}"
    mode: '0755'
    owner: pi
    group: pi
  become: yes
  become_user: root
  with_items:
    - "{{ remote_modules_location }}/featherstreamer"
    - "{{ remote_modules_location }}/featherstreamer-shared"
    - "{{ remote_modules_location }}/featherstreamer-web"
    # Need to access this directory during rsync
    - "{{ remote_modules_location }}"

- name: copy package-lock.json individually
  copy:
    dest: "{{ remote_modules_location }}/{{ item }}/package-lock.json"
    src: "{{ local_modules_location }}/{{ item }}/package-lock.json"
  register: copy_package_lock
  with_items:
    - featherstreamer
    - featherstreamer-web

- name: synchronize module from local sources
  synchronize:
    mode: push
    delete: yes
    dest: "{{ remote_modules_location }}/"
    src: "{{ local_modules_location }}/{{ item }}"
    rsync_opts:
      - "--exclude='node_modules'"
  register: update_sources
  with_items:
    - featherstreamer
    - featherstreamer-shared
    - featherstreamer-web
    - frameplayer

- name: install node modules
  shell: npm install --production
  args:
    chdir: "{{ remote_modules_location }}/{{ item.item }}"
  when: item.changed
  with_items: "{{ copy_package_lock.results }}"

- name: create media dir
  file:
    path: "{{ media_dir }}"
    state: directory
    owner: pi
    group: pi
  become: yes
  become_user: root

- name: add featherstreamer development config
  copy:
    dest: /etc/featherstreamer.conf.json
    src: "{{ role_path }}/files/featherstreamer.development.conf.json"
  become: yes
  become_user: root
  
- name: create featherstreamer service
  copy:
    dest: /etc/systemd/system/featherstreamer.service
    content: |
      [Unit]
      Description=featherstreamer
      After=network.target

      [Service]
      ExecStart=/usr/local/bin/npm start
      WorkingDirectory={{ remote_modules_location }}/featherstreamer
      User=root
      Restart=always

      [Install]
      WantedBy=multi-user.target
  register: featherstreamer_service
  become: yes
  become_user: root

- name: create featherstreamer-web service
  copy:
    dest: /etc/systemd/system/featherstreamer-web.service
    content: |
      [Unit]
      Description=featherstreamer frontend
      After=network.target

      [Service]
      ExecStart=/usr/local/bin/npm run serve
      WorkingDirectory={{ remote_modules_location }}/featherstreamer-web
      # Needs to run as root to open port 80.
      User=root
      Restart=always

      [Install]
      WantedBy=multi-user.target
  register: featherstreamer_web_service
  become: yes
  become_user: root

- name: start featherstreamer services at boot
  service:
    name: "{{ item }}"
    daemon_reload: "{{ featherstreamer_web_service.changed or featherstreamer_service.changed }}"
    enabled: yes
    state: "{{ 'restarted' if featherstreamer_web_service.changed or featherstreamer_service.changed or update_sources.changed or copy_package_lock.changed else 'started' }}"
  with_items:
    - featherstreamer
    - featherstreamer-web
  become: yes
  become_user: root
